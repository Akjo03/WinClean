<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgParse.Error" xml:space="preserve">
    <value>strings.ArgParse.Error</value>
    <comment>Error while parsing arguments!</comment>
  </data>
  <data name="ArgParse.Help" xml:space="preserve">
    <value>strings.ArgParse.Help</value>
    <comment>Help for WinClean arguments is not implemented yet... Please wait for future updates!</comment>
  </data>
  <data name="ArgParse.LocaleNotFound" xml:space="preserve">
    <value>strings.ArgParse.LocaleNotFound</value>
    <comment>Locale {locale} was not found!</comment>
  </data>
  <data name="ArgParse.PartNotFound" xml:space="preserve">
    <value>strings.ArgParse.PartNotFound</value>
    <comment>Part "{part_name]" was not found!</comment>
  </data>
  <data name="ArgParse.PartNotNumerical" xml:space="preserve">
    <value>strings.ArgParse.PartNotNumerical</value>
    <comment>Part " {part_name}" is not a number!</comment>
  </data>
  <data name="ArgParse.SkippingLanguageSelection" xml:space="preserve">
    <value>strings.ArgParse.SkippingLanguageSelection</value>
    <comment>Part 0 for language selection will be skipped because locale has been given.</comment>
  </data>
  <data name="CancelEventMessage" xml:space="preserve">
    <value>strings.CancelEventMessage</value>
    <comment>Canceled WinClean! Finishing up...</comment>
  </data>
  <data name="EarlyDevelopmentMessage" xml:space="preserve">
    <value>strings.EarlyDevelopmentMessage</value>
    <comment>Please note that WinClean is still in early development!</comment>
  </data>
  <data name="EnterToContinue" xml:space="preserve">
    <value>strings.EnterToContinue</value>
    <comment>Press enter to continue...</comment>
  </data>
  <data name="EnterToExit" xml:space="preserve">
    <value>strings.EnterToExit</value>
    <comment>Press enter to exit WinClean...</comment>
  </data>
  <data name="ExitingWithExitCode" xml:space="preserve">
    <value>strings.ExitingWithExitCode</value>
    <comment>Exiting with exit code {exitCode}...</comment>
  </data>
  <data name="FatalErrorOccured" xml:space="preserve">
    <value>strings.FatalErrorOccured</value>
    <comment>A fatal error occurred...</comment>
  </data>
  <data name="LanguageSelectionTitle" xml:space="preserve">
    <value>strings.LanguageSelectionTitle</value>
    <comment>Select Language</comment>
  </data>
  <data name="NotWindows" xml:space="preserve">
    <value>strings.NotWindows</value>
    <comment>WinClean doesn't seem to be running on Windows! WinClean only works on Windows 10.</comment>
  </data>
  <data name="NotWindows10" xml:space="preserve">
    <value>strings.NotWindows10</value>
    <comment>WinClean doesn't seem to be running on Windows 10! WinClean only works on Windows 10.</comment>
  </data>
  <data name="Part1.ActivationCheck.Error" xml:space="preserve">
    <value>strings.Part1.ActivationCheck.Error</value>
    <comment>The check if windows is activated has failed!</comment>
  </data>
  <data name="Part1.ActivationKey.Request" xml:space="preserve">
    <value>strings.Part1.ActivationKey.Request</value>
    <comment>Great! Please enter your activation key below:</comment>
  </data>
  <data name="Part1.ActivationKey.Request.Name" xml:space="preserve">
    <value>strings.Part1.ActivationKey.Request.Name</value>
    <comment>Activation Key</comment>
  </data>
  <data name="Part1.ActivationKeyInstallation.Error" xml:space="preserve">
    <value>strings.Part1.ActivationKeyInstallation.Error</value>
    <comment>...</comment>
  </data>
  <data name="Part1.ActivationKeyInstallation.Installing" xml:space="preserve">
    <value>strings.Part1.ActivationKeyInstallation.Installing</value>
    <comment>Your activation key is being installed...</comment>
  </data>
  <data name="Part1.ActivationKeyInstallation.Success" xml:space="preserve">
    <value>strings.Part1.ActivationKeyInstalled</value>
    <comment>Your activation key has been succesfully installed.</comment>
  </data>
  <data name="Part1.AlreadyActivated" xml:space="preserve">
    <value>strings.Part1.AlreadyActivated</value>
    <comment>Your windows installation is already activated. Skipping windows activation...</comment>
  </data>
  <data name="Part1.HasActivationKey.Selection" xml:space="preserve">
    <value>strings.Part1.HasActivationKey.Selection</value>
    <comment>Do you have an activation key?</comment>
  </data>
  <data name="Part1.HasActivationKey.Selection.Error" xml:space="preserve">
    <value>strings.Part1.HasActivationKey.Selection.Error</value>
    <comment>Error on selection "HasActivationKey"...</comment>
  </data>
  <data name="Part1.HasActivationKey.Selection.No" xml:space="preserve">
    <value>strings.Part1.HasActivationKey.Selection.No</value>
    <comment>No, I want to buy one.</comment>
  </data>
  <data name="Part1.HasActivationKey.Selection.Skip" xml:space="preserve">
    <value>strings.Part1.HasActivationKey.Selection.Skip</value>
    <comment>No, I want to skip the activation process.</comment>
  </data>
  <data name="Part1.HasActivationKey.Selection.Yes" xml:space="preserve">
    <value>strings.Part1.HasActivationKey.Selection.Yes</value>
    <comment>Yes, I do.</comment>
  </data>
  <data name="Part1.Intro" xml:space="preserve">
    <value>strings.Part1.Intro</value>
    <comment>To activate Windows you need to have an activation key.</comment>
  </data>
  <data name="Part1.KmsServer.Request" xml:space="preserve">
    <value>strings.Part1.KmsServer.Request</value>
    <comment>Please enter the domain of the KMS server below:</comment>
  </data>
  <data name="Part1.KmsServer.Request.Name" xml:space="preserve">
    <value>strings.Part1.KmsServer.Request.Name</value>
    <comment>KMS Server</comment>
  </data>
  <data name="Part1.KmsServer.Selection" xml:space="preserve">
    <value>strings.Part1.KmsServer.Selection</value>
    <comment>Is your activation key managed by a KMS server?</comment>
  </data>
  <data name="Part1.KmsServer.Selection.DontKnow" xml:space="preserve">
    <value>strings.Part1.KmsServer.Selection.DontKnow</value>
    <comment>I don't know what that means</comment>
  </data>
  <data name="Part1.KmsServer.Selection.Error" xml:space="preserve">
    <value>strings.Part1.KmsServer.Selection.Error</value>
    <comment>Error on selection "KmsServer"...</comment>
  </data>
  <data name="Part1.KmsServer.Selection.No" xml:space="preserve">
    <value>stringsPart1.KmsServer.Selection.No</value>
    <comment>No, it isn't.</comment>
  </data>
  <data name="Part1.KmsServer.Selection.Yes" xml:space="preserve">
    <value>strings.Part1.KmsServer.Selection.Yes</value>
    <comment>Yes, it is.</comment>
  </data>
  <data name="Part1.KmsServer.Setting" xml:space="preserve">
    <value>strings.Part1.KmsServer.Setting</value>
    <comment>KMS Server is being set...</comment>
  </data>
  <data name="Part1.KmsServer.Setting.Error" xml:space="preserve">
    <value>strings.Part1.KmsServer.Setting.Error</value>
    <comment>...</comment>
  </data>
  <data name="Part1.KmsServer.Setting.Success" xml:space="preserve">
    <value>strings.Part1.KmsServer.Setting.Success</value>
    <comment>KMS Server has been succesfully set.</comment>
  </data>
  <data name="Part1.NotUsingKmsServer" xml:space="preserve">
    <value>strings.Part1.NotUsingKmsServer</value>
    <comment>Not using a KMS server. Continuing...</comment>
  </data>
  <data name="Part1.Title" xml:space="preserve">
    <value>strings.Part1.Title</value>
    <comment>=== Part 1 - Activating Windows ===</comment>
  </data>
  <data name="Part1.TitleWindow" xml:space="preserve">
    <value>strings.Part1.TitleWindow</value>
    <comment>Activating Windows</comment>
  </data>
  <data name="Part1.UserSkippedActivation" xml:space="preserve">
    <value>strings.Part1.UserSkippedActivation</value>
    <comment>User has skipped the Windows Activation process.</comment>
  </data>
  <data name="Part1.WindowsActivating" xml:space="preserve">
    <value>strings.Part1.WindowsActivating</value>
    <comment>Your Windows installation is being activated...</comment>
  </data>
  <data name="Part1.WindowsActivation.Error" xml:space="preserve">
    <value>strings.Part1.WindowsActivation.Error</value>
    <comment>...</comment>
  </data>
  <data name="Part1.WindowsActivation.Success" xml:space="preserve">
    <value>strings.Part1.WindowsActivation.Success</value>
    <comment>Windows has been succesfully activated.</comment>
  </data>
  <data name="Part1.WindowsEditions" xml:space="preserve">
    <value>strings.Part1.WindowsEditions</value>
    <comment>There are many different Windows editions available.</comment>
  </data>
  <data name="Part1.WindowsEditions.BoughtOrSkip" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.BoughtOrSkip</value>
    <comment>Press Enter if you have bought the activation key or press ESC to skip activation.</comment>
  </data>
  <data name="Part1.WindowsEditions.ContinueOrInstructions" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.ContinueOrInstructions</value>
    <comment>Press Enter to continue or press 1 to view detailed instructions on how to buy the activation key.</comment>
  </data>
  <data name="Part1.WindowsEditions.LearnMore" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.LearnMore</value>
    <comment>If you want to learn more about the different editions you can go to https://www.microsoft.com/en-us/windowsforbusiness/compare.</comment>
  </data>
  <data name="Part1.WindowsEditions.OpeningInstructions" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.OpeningInstructions</value>
    <comment>Opening instructions on how to buy the activation key...</comment>
  </data>
  <data name="Part1.WindowsEditions.OpeningLink" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.OpeningLink</value>
    <comment>Opening {link}...</comment>
  </data>
  <data name="Part1.WindowsEditions.OpenMessage" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.OpenMessage</value>
    <comment>WinClean will open Microsoft's page for you to buy an activation key for Windows 10 {edition}.</comment>
  </data>
  <data name="Part1.WindowsEditions.Overview" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.Overview</value>
    <comment>Here is a quick overview:</comment>
  </data>
  <data name="Part1.WindowsEditions.Overview.Home" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.Overview.Home</value>
    <comment>Home - For users that want the standard Windows and everything that is needed for home use.</comment>
  </data>
  <data name="Part1.WindowsEditions.Overview.Pro" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.Overview.Pro</value>
    <comment>Pro - For users that want to get everything out of Windows and/or as a solid foundation for every business.</comment>
  </data>
  <data name="Part1.WindowsEditions.Overview.ProForWorkstations" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.Overview.ProForWorkstations</value>
    <comment>Pro for Workstations - For users that need to handle advanced workloads or have advanced data needs.</comment>
  </data>
  <data name="Part1.WindowsEditions.Selection" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.Selection</value>
    <comment>Which Windows edition do you want to buy?</comment>
  </data>
  <data name="Part1.WindowsEditions.Selection.Error" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.Selection.Error</value>
    <comment>Error on selection "WindowsEditionsSelection"...</comment>
  </data>
  <data name="Part1.WindowsEditions.Selection.Home" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.Selection.Home</value>
    <comment>Windows 10 Home</comment>
  </data>
  <data name="Part1.WindowsEditions.Selection.Pro" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.Selection.Pro</value>
    <comment>Windows 10 Pro</comment>
  </data>
  <data name="Part1.WindowsEditions.Selection.ProForWorkstations" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.Selection.ProForWorkstations</value>
    <comment>Windows 10 Pro for Workstations</comment>
  </data>
  <data name="Part1.WindowsEditions.Selection.Skip" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.Selection.Skip</value>
    <comment>I changed my mind and want to skip the activation process.</comment>
  </data>
  <data name="Part1.WindowsEditions.SupportNote" xml:space="preserve">
    <value>strings.Part1.WindowsEditions.SupportNote</value>
    <comment>Note: WinClean does not support Enterprise CSP, Education, LTSC or other editions yet.</comment>
  </data>
  <data name="Select" xml:space="preserve">
    <value>strings.Select</value>
    <comment>Select</comment>
  </data>
  <data name="Selection.Language" xml:space="preserve">
    <value>strings.Selection.Language</value>
    <comment>Please select your langauge:</comment>
  </data>
  <data name="Selection.Language.AnsEnglish" xml:space="preserve">
    <value>strings.Selection.Language.AnsEnglish</value>
    <comment>English</comment>
  </data>
  <data name="Selection.Language.AnsGerman" xml:space="preserve">
    <value>strings.Selection.Language.AnsGerman</value>
    <comment>Deutsch</comment>
  </data>
  <data name="Selection.Language.CurrentLanguage" xml:space="preserve">
    <value>strings.Selection.Language.CurrentLanguage</value>
    <comment>We have detected that your language is set to English. Is that correct?</comment>
  </data>
  <data name="Selection.Language.CurrentLanguage.Correct" xml:space="preserve">
    <value>strings.Selection.Language.CurrentLanguage.Correct</value>
    <comment>Yes, that is correct!</comment>
  </data>
  <data name="Selection.Language.CurrentLanguage.Wrong" xml:space="preserve">
    <value>strings.Selection.Language.CurrentLanguage.Wrong</value>
    <comment>No, I want to change the language!</comment>
  </data>
  <data name="SelectionEmpty" xml:space="preserve">
    <value>strings.SelectionEmpty</value>
    <comment>Selection is empty!</comment>
  </data>
  <data name="SelectionNotInRange" xml:space="preserve">
    <value>strings.SelectionNotInRange</value>
    <comment>Selection is not in range!</comment>
  </data>
  <data name="SelectionNotNumerical" xml:space="preserve">
    <value>strings.SelectionNotNumerical</value>
    <comment>Selection is not a number!</comment>
  </data>
  <data name="WelcomeMessage" xml:space="preserve">
    <value>strings.WelcomeMessage</value>
    <comment>Welcome to WinClean!</comment>
  </data>
  <data name="WelcomeTitle" xml:space="preserve">
    <value>strings.WelcomeTitle</value>
    <comment>Welcome</comment>
  </data>
</root>